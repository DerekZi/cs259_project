
Below is a program with High Level Synthesis pragma inserted:


#pragma ACCEL kernel

void kernel_symm(double alpha,double beta,double C[60][80],double A[60][60],double B[60][80])
{
  int i;
  int j;
  int k;
//BLAS PARAMS
//SIDE = 'L'
//UPLO = 'L'
// =>  Form  C := alpha*A*B + beta*C
// A is MxM
// B is MxN
// C is MxN
//note that due to Fortran array layout, the code below more closely resembles upper triangular case in BLAS
  
#pragma ACCEL PIPELINE auto{__PIPE__L0}
  
#pragma ACCEL TILE FACTOR=auto{__TILE__L0}
  
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L0}
  for (i = 0; i < 60; i++) {
    
#pragma ACCEL PIPELINE auto{__PIPE__L1}
    
#pragma ACCEL TILE FACTOR=auto{__TILE__L1}
    
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L1}
    for (j = 0; j < 80; j++) {
      double temp2 = ((double )0);
      
#pragma ACCEL PARALLEL reduction=temp2 FACTOR=auto{__PARA__L2}
      for (k = 0; k < 60; k++) {
        if (k < i) {
          C[k][j] += alpha * B[i][j] * A[i][k];
          temp2 += B[k][j] * A[i][k];
        }
      }
      C[i][j] = beta * C[i][j] + alpha * B[i][j] * A[i][i] + alpha * temp2;
    }
  }
}
Based on the example above, act as an expert in High Level Synthesis and apply High Level Synthesis(HLS) pragmas to the following program. Reason for your choice of HLS pragmas:



void kernel_bicg(int m,int n,double A[124][116],double s[116],double q[124],double p[116],double r[124])

{

  int i;

  int j;

//#pragma scop

  

  for (i = 0; i < 116; i++) {

    s[i] = ((double )0);

  }

  

  

  

  for (i = 0; i < 124; i++) {

    q[i] = 0.0;

    

    for (j = 0; j < 116; j++) {

      s[j] += r[i] * A[i][j];

      q[i] += A[i][j] * p[j];

    }

  }

//#pragma endscop

}

#pragma HLS INTERFACE ap_ctrl_none port=return
#pragma HLS INTERFACE ap_done port=return
#pragma HLS INTERFACE ap_none port=return
#pragma HLS INTERFACE ap_none port=return
#pragma HLS INTERFACE ap_none port=return
#pragma HLS INTERFACE ap_none port=return
#pragma HLS INTERFACE ap_none port=return
#pragma HLS INTERFACE ap_none port=return
#pragma HLS INTERFACE ap_none port=return
#pragma HLS INTERFACE ap_none port=return
#pragma HLS INTER