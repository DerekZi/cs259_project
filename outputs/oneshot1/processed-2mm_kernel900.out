
Below is a program with High Level Synthesis pragma inserted:


#pragma ACCEL kernel

void kernel_symm(double alpha,double beta,double C[60][80],double A[60][60],double B[60][80])
{
  int i;
  int j;
  int k;
//BLAS PARAMS
//SIDE = 'L'
//UPLO = 'L'
// =>  Form  C := alpha*A*B + beta*C
// A is MxM
// B is MxN
// C is MxN
//note that due to Fortran array layout, the code below more closely resembles upper triangular case in BLAS
  
#pragma ACCEL PIPELINE auto{__PIPE__L0}
  
#pragma ACCEL TILE FACTOR=auto{__TILE__L0}
  
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L0}
  for (i = 0; i < 60; i++) {
    
#pragma ACCEL PIPELINE auto{__PIPE__L1}
    
#pragma ACCEL TILE FACTOR=auto{__TILE__L1}
    
#pragma ACCEL PARALLEL FACTOR=auto{__PARA__L1}
    for (j = 0; j < 80; j++) {
      double temp2 = ((double )0);
      
#pragma ACCEL PARALLEL reduction=temp2 FACTOR=auto{__PARA__L2}
      for (k = 0; k < 60; k++) {
        if (k < i) {
          C[k][j] += alpha * B[i][j] * A[i][k];
          temp2 += B[k][j] * A[i][k];
        }
      }
      C[i][j] = beta * C[i][j] + alpha * B[i][j] * A[i][i] + alpha * temp2;
    }
  }
}
Based on the example above, act as an expert in High Level Synthesis and apply High Level Synthesis(HLS) pragmas to the following program. Reason for your choice of HLS pragmas:



void kernel_2mm(int ni, int nj, int nk, int nl, double alpha, double beta, double tmp[40][50], double A[40][70], double B[70][50], double C[50][80], double D[40][80])

{

  int i;

  int j;

  int k;

  // #pragma scop

  /* D := alpha*A*B*C + beta*D */



  //<PLACEHOLDER>

  for (i = 0; i < 40; i++)

  {



    //<PLACEHOLDER>

    for (j = 0; j < 50; j++)

    {

      tmp[i][j] = 0.0;

      //<PLACEHOLDER>

      for (k = 0; k < 70; ++k)

      {

        tmp[i][j] += alpha * A[i][k] * B[k][j];

      }

    }

  }



  //<PLACEHOLDER>

  for (i = 0; i < 40; i++)

  {



    //<PLACEHOLDER>

    for (j = 0; j < 80; j++)

    {

      D[i][j] *= beta;

      //<PLACEHOLDER>

      for (k = 0; k < 50; ++k)

      {

        D[i][j] += tmp[i][k] * C[k][j];

      }

    }

  }

  // #pragma endscop

}

